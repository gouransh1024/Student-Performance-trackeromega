"""
Settings Page - Application configuration and preferences (SQLite version)
"""
import streamlit as st
import pandas as pd
from datetime import date
import sys
import os

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# ‚úÖ Correct SQLite imports
from db.connection import get_db_connection, init_database, get_database_info, initialize_sample_data
from models.student import Student
from models.subject import Subject
from models.marks import Marks
from utils.data_management import get_sample_data_info, delete_sample_data, reset_to_sample_data, get_data_summary

st.set_page_config(
    page_title="Settings",
    page_icon="‚öôÔ∏è",
    layout="wide"
)

st.title("‚öôÔ∏è Application Settings")
st.markdown("Configure application preferences and manage system data")

# Sidebar for settings categories
with st.sidebar:
    st.subheader("Settings Categories")

    settings_category = st.radio(
        "Choose Category:",
        [
            "Database Management",
            "Data Import/Export", 
            "System Information",
            "Application Preferences",
            "Backup & Restore"
        ]
    )

# Main content area
if settings_category == "Database Management":
    st.subheader("üóÑÔ∏è Database Management")

    # Database status
    st.markdown("### Database Status")

    try:
        # Test database connection
        db_info = get_database_info()
        test_students = Student.get_all_students()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.success("‚úÖ Database connection is working")
            st.info(f"**Database:** SQLite")
            st.info(f"**Location:** {db_info.get('database_path', 'Unknown')}")
            
        with col2:
            db_size_mb = db_info.get('database_size', 0) / (1024 * 1024) if db_info.get('database_size', 0) > 0 else 0
            st.metric("Database Size", f"{db_size_mb:.2f} MB")

        # Display basic statistics
        col1, col2, col3 = st.columns(3)

        with col1:
            student_count = db_info.get('student_count', 0)
            st.metric("Total Students", student_count)

        with col2:
            subject_count = db_info.get('subject_count', 0)
            st.metric("Total Subjects", subject_count)

        with col3:
            marks_count = db_info.get('marks_count', 0)
            st.metric("Total Marks", marks_count)

    except Exception as e:
        st.error(f"‚ùå Database connection failed: {str(e)}")

    st.markdown("---")

    # Database operations
    st.markdown("### Database Operations")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### Reinitialize Database")
        st.warning("‚ö†Ô∏è This will recreate all tables and add sample data")

        if st.button("üîÑ Reinitialize Database"):
            with st.spinner("Reinitializing database..."):
                try:
                    if init_database():
                        st.success("‚úÖ Database reinitialized successfully!")
                        st.balloons()
                        st.rerun()
                    else:
                        st.error("‚ùå Failed to reinitialize database")
                except Exception as e:
                    st.error(f"‚ùå Error: {str(e)}")

    with col2:
        st.markdown("#### Add Sample Data")
        st.info("Add sample students, subjects, and marks if database is empty")

        if st.button("üìù Add Sample Data"):
            with st.spinner("Adding sample data..."):
                try:
                    if initialize_sample_data():
                        st.success("‚úÖ Sample data added successfully!")
                        st.rerun()
                    else:
                        st.error("‚ùå Failed to add sample data")
                except Exception as e:
                    st.error(f"‚ùå Error: {str(e)}")

    st.markdown("---")

    # Sample Data Management
    st.markdown("### Sample Data Management")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Delete Sample Data")
        st.warning("‚ö†Ô∏è This will remove all sample students, subjects, and marks")
        
        # Check if sample data exists using utility function
        try:
            sample_info = get_sample_data_info()
            
            if sample_info['student_count'] > 0 and sample_info['subject_count'] > 0 and sample_info['marks_count'] > 0:
                st.info(f"üìä Current data: {sample_info['student_count']} students, {sample_info['subject_count']} subjects, {sample_info['marks_count']} marks")
                
                if sample_info['is_sample_data']:
                    st.success("‚úÖ Sample data detected")
                else:
                    st.info("üìù Custom data detected")
                
                if st.button("üóëÔ∏è Delete All Data", type="secondary"):
                    if st.checkbox("I confirm deletion of all data", key="delete_sample_data"):
                        with st.spinner("Deleting data..."):
                            try:
                                if delete_sample_data():
                                    st.success("‚úÖ Data deleted successfully!")
                                    st.balloons()
                                    st.rerun()
                                else:
                                    st.error("‚ùå Failed to delete data")
                            except Exception as e:
                                st.error(f"‚ùå Error: {str(e)}")
            else:
                st.info("üìä No data found in database")
                
        except Exception as e:
            st.error(f"‚ùå Error checking data: {str(e)}")
    
    with col2:
        st.markdown("#### Reset to Sample Data")
        st.info("Clear existing data and restore fresh sample data")
        
        if st.button("üîÑ Reset to Sample Data", type="secondary"):
            if st.checkbox("I confirm resetting to sample data", key="reset_sample_data"):
                with st.spinner("Resetting to sample data..."):
                    try:
                        if reset_to_sample_data():
                            st.success("‚úÖ Reset to sample data successful!")
                            st.balloons()
                            st.rerun()
                        else:
                            st.error("‚ùå Failed to reset to sample data")
                    except Exception as e:
                        st.error(f"‚ùå Error: {str(e)}")

    st.markdown("---")

    # Data Summary
    st.markdown("### üìä Data Summary")
    
    try:
        data_summary = get_data_summary()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total Students", data_summary['total_students'])
        
        with col2:
            st.metric("Total Subjects", data_summary['total_subjects'])
        
        with col3:
            st.metric("Total Assessments", data_summary['total_assessments'])
        
        with col4:
            st.metric("Average Performance", f"{data_summary['average_percentage']}%")
        
        # Grade distribution
        if data_summary['grade_distribution']:
            st.markdown("#### Grade Distribution")
            grade_cols = st.columns(len(data_summary['grade_distribution']))
            
            for i, (grade, count) in enumerate(data_summary['grade_distribution'].items()):
                with grade_cols[i]:
                    st.metric(grade, count)
        
        # Sample data indicator
        if data_summary['is_sample_data']:
            st.success("‚úÖ Sample data detected in database")
        elif data_summary['total_students'] > 0:
            st.info("üìù Custom data detected in database")
        else:
            st.warning("‚ö†Ô∏è No data found in database")
            
    except Exception as e:
        st.error(f"Error loading data summary: {str(e)}")

    st.markdown("---")

    # Data cleanup
    st.markdown("### Data Cleanup")

    with st.expander("‚ö†Ô∏è Danger Zone - Data Deletion"):
        st.error("**WARNING**: These operations cannot be undone!")

        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("üóëÔ∏è Clear All Marks", type="secondary"):
                if st.checkbox("I confirm deletion of all marks", key="clear_marks"):
                    try:
                        from db.connection import execute_query
                        if execute_query("DELETE FROM Marks"):
                            st.success("‚úÖ All marks deleted")
                            st.rerun()
                        else:
                            st.error("‚ùå Failed to delete marks")
                    except Exception as e:
                        st.error(f"‚ùå Error: {str(e)}")

        with col2:
            if st.button("üóëÔ∏è Clear All Students", type="secondary"):
                if st.checkbox("I confirm deletion of all students", key="clear_students"):
                    try:
                        from db.connection import execute_query
                        # Delete in order due to foreign key constraints
                        execute_query("DELETE FROM Marks")
                        if execute_query("DELETE FROM Student"):
                            st.success("‚úÖ All students deleted")
                            st.rerun()
                        else:
                            st.error("‚ùå Failed to delete students")
                    except Exception as e:
                        st.error(f"‚ùå Error: {str(e)}")

        with col3:
            if st.button("üóëÔ∏è Clear All Subjects", type="secondary"):
                if st.checkbox("I confirm deletion of all subjects", key="clear_subjects"):
                    try:
                        from db.connection import execute_query
                        # Delete in order due to foreign key constraints
                        execute_query("DELETE FROM Marks")
                        if execute_query("DELETE FROM Subject"):
                            st.success("‚úÖ All subjects deleted")
                            st.rerun()
                        else:
                            st.error("‚ùå Failed to delete subjects")
                    except Exception as e:
                        st.error(f"‚ùå Error: {str(e)}")

elif settings_category == "Data Import/Export":
    st.subheader("üì§üì• Data Import/Export")

    # Export section
    st.markdown("### üì§ Export Data")

    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown("#### Export Students")
        if st.button("üìä Export Students CSV", use_container_width=True):
            try:
                students = Student.get_all_students()
                if students:
                    df = pd.DataFrame(students, columns=['ID', 'Name', 'Class', 'Section', 'DOB', 'Created'])
                    csv = df.to_csv(index=False)
                    st.download_button(
                        label="Download Students CSV",
                        data=csv,
                        file_name=f"students_export_{date.today().strftime('%Y%m%d')}.csv",
                        mime="text/csv"
                    )
                else:
                    st.warning("No students to export")
            except Exception as e:
                st.error(f"Export error: {str(e)}")

    with col2:
        st.markdown("#### Export Subjects")
        if st.button("üìö Export Subjects CSV", use_container_width=True):
            try:
                subjects = Subject.get_all_subjects()
                if subjects:
                    df = pd.DataFrame(subjects, columns=['ID', 'Subject Name', 'Created'])
                    csv = df.to_csv(index=False)
                    st.download_button(
                        label="Download Subjects CSV",
                        data=csv,
                        file_name=f"subjects_export_{date.today().strftime('%Y%m%d')}.csv",
                        mime="text/csv"
                    )
                else:
                    st.warning("No subjects to export")
            except Exception as e:
                st.error(f"Export error: {str(e)}")

    with col3:
        st.markdown("#### Export Marks")
        if st.button("üìù Export Marks CSV", use_container_width=True):
            try:
                marks = Marks.get_all_marks()
                if marks:
                    df = pd.DataFrame(marks, columns=[
                        'Mark ID', 'Student', 'Subject', 'Marks Obtained', 
                        'Max Marks', 'Assessment Date', 'Assessment Type', 
                        'Created', 'Student ID', 'Subject ID'
                    ])
                    csv = df.to_csv(index=False)
                    st.download_button(
                        label="Download Marks CSV",
                        data=csv,
                        file_name=f"marks_export_{date.today().strftime('%Y%m%d')}.csv",
                        mime="text/csv"
                    )
                else:
                    st.warning("No marks to export")
            except Exception as e:
                st.error(f"Export error: {str(e)}")

    st.markdown("---")

    # Import section
    st.markdown("### üì• Import Data")

    st.info("üìã Import data from CSV files. Ensure your files match the expected format.")

    tab1, tab2, tab3 = st.tabs(["Import Students", "Import Subjects", "Import Marks"])

    with tab1:
        st.markdown("#### Import Students from CSV")
        st.markdown("**Expected format:** Name, Class, Section, DOB (YYYY-MM-DD)")

        uploaded_students = st.file_uploader(
            "Choose students CSV file",
            type=['csv'],
            key="students_upload"
        )

        if uploaded_students:
            try:
                df = pd.read_csv(uploaded_students)
                st.write("Preview of uploaded data:")
                st.dataframe(df.head())

                if st.button("Import Students"):
                    st.info("Import functionality coming soon!")
            except Exception as e:
                st.error(f"Error reading file: {str(e)}")

    with tab2:
        st.markdown("#### Import Subjects from CSV")
        st.markdown("**Expected format:** Subject Name")

        uploaded_subjects = st.file_uploader(
            "Choose subjects CSV file",
            type=['csv'],
            key="subjects_upload"
        )

        if uploaded_subjects:
            try:
                df = pd.read_csv(uploaded_subjects)
                st.write("Preview of uploaded data:")
                st.dataframe(df.head())

                if st.button("Import Subjects"):
                    st.info("Import functionality coming soon!")
            except Exception as e:
                st.error(f"Error reading file: {str(e)}")

    with tab3:
        st.markdown("#### Import Marks from CSV")
        st.markdown("**Expected format:** Student ID, Subject ID, Marks Obtained, Max Marks, Assessment Date, Assessment Type")

        uploaded_marks = st.file_uploader(
            "Choose marks CSV file",
            type=['csv'],
            key="marks_upload"
        )

        if uploaded_marks:
            try:
                df = pd.read_csv(uploaded_marks)
                st.write("Preview of uploaded data:")
                st.dataframe(df.head())

                if st.button("Import Marks"):
                    st.info("Import functionality coming soon!")
            except Exception as e:
                st.error(f"Error reading file: {str(e)}")

elif settings_category == "System Information":
    st.subheader("‚ÑπÔ∏è System Information")

    # Application information
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üì± Application Info")

        app_info = {
            "Application": "Student Performance Tracker",
            "Version": "2.0.0 (SQLite)",
            "Framework": "Streamlit",
            "Database": "SQLite",
            "Python Version": "3.x",
            "Last Updated": "2024"
        }

        for key, value in app_info.items():
            st.write(f"**{key}:** {value}")

    with col2:
        st.markdown("### üìä Database Statistics")

        try:
            db_info = get_database_info()

            db_stats = {
                "Total Students": db_info.get('student_count', 0),
                "Total Subjects": db_info.get('subject_count', 0),
                "Total Assessments": db_info.get('marks_count', 0),
                "Database Size": f"{db_info.get('database_size', 0) / 1024:.1f} KB",
                "Database Exists": "Yes" if db_info.get('database_exists', False) else "No"
            }

            for key, value in db_stats.items():
                st.write(f"**{key}:** {value}")

        except Exception as e:
            st.error(f"Could not load database statistics: {str(e)}")

    st.markdown("---")

    # System requirements
    st.markdown("### üíª System Requirements")

    requirements = {
        "Python": "3.8 or higher",
        "RAM": "512MB minimum, 1GB recommended",
        "Storage": "100MB for application, additional for data",
        "Database": "SQLite 3.x (built-in)",
        "Browser": "Modern web browser (Chrome, Firefox, Safari, Edge)"
    }

    for requirement, details in requirements.items():
        st.write(f"**{requirement}:** {details}")

    st.markdown("---")

    # Feature list
    st.markdown("### ‚ú® Features")

    features = [
        "‚úÖ Student Management (CRUD operations)",
        "‚úÖ Subject Management with quick add",
        "‚úÖ Marks Entry with validation and grading",
        "‚úÖ Individual Student Report Cards",
        "‚úÖ Class Performance Analytics",
        "‚úÖ Interactive Visual Reports",
        "‚úÖ CSV Export capabilities",
        "‚úÖ Search and Filter functionality",
        "‚úÖ SQLite Database Management",
        "‚úÖ Responsive design",
        "‚úÖ Sample Data Generation",
        "üîÑ Data Import (Coming Soon)",
        "üîÑ Advanced Analytics (Coming Soon)",
        "üîÑ PDF Export (Coming Soon)"
    ]

    for feature in features:
        st.write(feature)

elif settings_category == "Application Preferences":
    st.subheader("üéõÔ∏è Application Preferences")

    st.info("üë§ Preferences are stored in browser session and will reset when you close the app")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üé® Display Settings")

        # Theme selection (placeholder)
        theme = st.selectbox(
            "Theme",
            options=["Light", "Dark", "Auto"],
            help="Select application theme (feature coming soon)"
        )

        # Page size preferences
        default_page_size = st.selectbox(
            "Default Page Size",
            options=[10, 25, 50, 100],
            index=0,
            help="Default number of items per page in tables"
        )

        # Auto-refresh
        auto_refresh = st.checkbox(
            "Auto-refresh data",
            help="Automatically refresh data every 30 seconds"
        )

        # Compact view
        compact_view = st.checkbox(
            "Compact table view",
            help="Use smaller fonts and spacing in tables"
        )

    with col2:
        st.markdown("### üìä Default Settings")

        # Default class/section for new entries
        default_class = st.selectbox(
            "Default Class",
            options=["", "10", "11", "12"],
            help="Default class for new student entries"
        )

        default_section = st.selectbox(
            "Default Section", 
            options=["", "A", "B", "C"],
            help="Default section for new student entries"
        )

        # Default assessment type
        default_assessment = st.selectbox(
            "Default Assessment Type",
            options=["Assignment", "Quiz", "Midterm", "Final"],
            help="Default type for new marks entries"
        )

        # Grade threshold
        pass_threshold = st.slider(
            "Pass Threshold (%)",
            min_value=30,
            max_value=50,
            value=40,
            help="Percentage required to pass"
        )

    # Save preferences
    if st.button("üíæ Save Preferences"):
        # Store in session state
        st.session_state.update({
            'theme': theme,
            'default_page_size': default_page_size,
            'auto_refresh': auto_refresh,
            'compact_view': compact_view,
            'default_class': default_class,
            'default_section': default_section,
            'default_assessment': default_assessment,
            'pass_threshold': pass_threshold
        })
        st.success("‚úÖ Preferences saved for this session!")

    st.markdown("---")

    # Reset preferences
    if st.button("üîÑ Reset to Defaults"):
        # Clear relevant session state
        keys_to_clear = [
            'theme', 'default_page_size', 'auto_refresh', 'compact_view',
            'default_class', 'default_section', 'default_assessment', 'pass_threshold'
        ]
        for key in keys_to_clear:
            if key in st.session_state:
                del st.session_state[key]
        st.success("‚úÖ Preferences reset to defaults!")
        st.rerun()

elif settings_category == "Backup & Restore":
    st.subheader("üíæ Backup & Restore")

    st.warning("‚ö†Ô∏è Regular backups are recommended to prevent data loss")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üì§ Create Backup")

        st.info("Create a complete backup of all system data")

        backup_format = st.radio(
            "Backup Format:",
            options=["CSV Archive", "Database Copy"],
            help="Choose the format for your backup"
        )

        include_settings = st.checkbox(
            "Include Settings",
            value=True,
            help="Include application settings in backup"
        )

        if st.button("üóÇÔ∏è Create Full Backup", use_container_width=True):
            with st.spinner("Creating backup..."):
                try:
                    # Get all data
                    students = Student.get_all_students()
                    subjects = Subject.get_all_subjects()
                    marks = Marks.get_all_marks()

                    if backup_format == "CSV Archive":
                        # Create combined CSV export
                        import zipfile
                        import io
                        
                        # Create in-memory ZIP file
                        zip_buffer = io.BytesIO()
                        
                        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                            # Add students CSV
                            if students:
                                students_df = pd.DataFrame(students, columns=['ID', 'Name', 'Class', 'Section', 'DOB', 'Created'])
                                zip_file.writestr("students.csv", students_df.to_csv(index=False))
                            
                            # Add subjects CSV
                            if subjects:
                                subjects_df = pd.DataFrame(subjects, columns=['ID', 'Subject Name', 'Created'])
                                zip_file.writestr("subjects.csv", subjects_df.to_csv(index=False))
                            
                            # Add marks CSV
                            if marks:
                                marks_df = pd.DataFrame(marks, columns=[
                                    'Mark ID', 'Student', 'Subject', 'Marks Obtained', 
                                    'Max Marks', 'Assessment Date', 'Assessment Type', 
                                    'Created', 'Student ID', 'Subject ID'
                                ])
                                zip_file.writestr("marks.csv", marks_df.to_csv(index=False))

                        zip_buffer.seek(0)
                        
                        st.download_button(
                            label="üì• Download Backup Archive",
                            data=zip_buffer.read(),
                            file_name=f"student_tracker_backup_{date.today().strftime('%Y%m%d')}.zip",
                            mime="application/zip"
                        )

                    else:  # Database Copy
                        st.info("Database copy backup coming soon!")

                except Exception as e:
                    st.error(f"Backup creation failed: {str(e)}")

    with col2:
        st.markdown("### üì• Restore from Backup")

        st.info("Restore system data from a previous backup")

        uploaded_backup = st.file_uploader(
            "Choose backup file",
            type=['zip', 'db'],
            help="Select your backup file"
        )

        if uploaded_backup:
            st.success(f"Backup file '{uploaded_backup.name}' uploaded successfully")

            restore_options = st.multiselect(
                "What to restore:",
                options=["Students", "Subjects", "Marks", "Settings"],
                default=["Students", "Subjects", "Marks"]
            )

            overwrite_existing = st.checkbox(
                "Overwrite existing data",
                help="‚ö†Ô∏è This will replace current data"
            )

            if st.button("üîÑ Restore Data", use_container_width=True):
                if overwrite_existing:
                    st.warning("Restore functionality coming soon!")
                else:
                    st.info("Please confirm overwrite to proceed")

# Footer with support information
st.markdown("---")
st.markdown("### üìû Support & Help")

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("**üìß Email Support**")
    st.write("gouransh1024@gmail.com")

with col2:
    st.markdown("**üìñ Documentation**")  
    st.write("Available in Help sections")

with col3:
    st.markdown("**üêõ Report Issues**")
    st.write("Use the help sections in each page")

# Quick actions sidebar
with st.sidebar:
    st.markdown("---")
    st.subheader("üöÄ Quick Actions")

    if st.button("üè† Go to Dashboard", use_container_width=True):
        st.switch_page("app.py")

    if st.button("üë• Manage Students", use_container_width=True):
        st.switch_page("pages/1_Manage_Students.py")

    if st.button("üìù Enter Marks", use_container_width=True):
        st.switch_page("pages/3_Enter_Update_Marks.py")

    if st.button("üìä View Analytics", use_container_width=True):
        st.switch_page("pages/5_Class_Analytics.py")
